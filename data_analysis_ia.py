# -*- coding: utf-8 -*-
"""Data_Analysis_IA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WlHGm98nuKKneYouVj9qivpXOqbU1uVR

# Universidad de Monterrey

<p align="left">  <img alt="img-name" src="https://drive.google.com/uc?export=view&id=130EQ9NXPHp7bZJMog_gCVwGcE_RB_SOK" width="450"> 
</p>

<br>

---

Course: Artificial Inteligence   
Lecturer: Andrés Hernández Gutiérrez   
Contact: andres.hernandezg@udem.edu   

-----
<br>

This nothebook performs the exploratory data analysis and the linear regression modelling of weight vs height for males and females. The analysed data was downloaded from [Kaggle](https://www.kaggle.com/datasets/mustafaali96/weight-height).

<br>

1. [Import standard libraries](#import-libraries)
2. [Read the dataset](#read-dataset)
3. [Generate linear predictive model for females](#linear-predictive-model-females)   
  3.1 [Exploratory data analysis](#exploratory-data-analysis-females)   
  3.2 [Data preprocessing](#data-preprocessing-females)   
  3.3 [Linear regression for females](#linear-regression-for-females)   
  3.4 [Model assesment](#model-assesment-females)   
  3.5 [Save the model](#save-the-mode-females)   
4. [Generate linear predictive model for males](#linear-predictive-model-males)   
  4.1 [Exploratory data analysis](#exploratory-data-analysis-males)   
  4.2 [Data preprocessing](#data-preprocessing-males)   
  4.3 [Linear regression for females](#linear-regression-for-males)   
  4.4 [Model assesment](#model-assesment-males)   
  4.5 [Save the model](#save-the-mode-males) 
5. [Conclusions](#conclusions)   
6. [References](#references)

<a name="import-libraries"></a>
### 1. Import standard libraries
"""

# import standard libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

"""<a name="read-dataset"></a>
### 2. Read the weight-height.csv dataset



"""

# mount google drive in collab
from google.colab import drive
drive.mount('/content/drive/')

dataframe=pd.read_excel('/content/drive/MyDrive/Colab Notebooks/Notebooks/datasets/weight-height-dataset-public.xltx')

dataframe

dataframe.head()

dataframe.dtypes

from pandas.core.indexes.extension import Index
dataframe.columns
Index(['Gender','Height','Weight'],dtype='object')

dataframe.shape

type(dataframe)

indx=dataframe['Gender']=='Female'
print(indx)

dataframe_females=dataframe[indx]

print(dataframe_females)

dataframe_females

#dataframe_males=dataframe[dataframe['Gender']=='Male']
#print(dataframe_males)

#print some stats regarding males
NSAMPLES_FEMALES, NFEATURES_FEMALES=dataframe_females.shape
print(f'Number of samples[females]:{NSAMPLES_FEMALES}')
print(f'Number of features[females]:{NFEATURES_FEMALES}')

NSAMPLES_FEMALES=dataframe_females.shape[0]
print(NSAMPLES_FEMALES)

NFEATURES_FEMALES=dataframe_females.shape[1]
print(NFEATURES_FEMALES)

#Compute the mean and standard deviation of height for females
mean_height= np.mean(dataframe_females['Height'])
std_height= np.std(dataframe_females['Height'])

print(f'Mean of heights[females]:{mean_height}[in]')
print(f'Standard deviation of heights[females]:{std_height}[in]')

#Plot the histogram of heights for females
plt.figure(figsize=(10,7))
plt.hist(dataframe_females['Height'])
plt.xlabel('Height[in]')
plt.ylabel('Frecuency')
plt.legend([r"$\mu: {0:.2f}$ in".format(mean_height)], prop={'size': 16})
plt.show
plt.grid(True)

#Plot the histogram of heights and weights for females
#plt.figure(figsize=(14,6))
fig,(ax1,ax2)=plt.subplots(1,2,figsize=(14,6))
ax1.hist(dataframe_females['Height'])
ax1.set_title('Histogram of heights for females in [in]')
ax1.set_xlabel('height [in]')
ax1.set_ylabel('frecuency')
ax1.grid(True)

ax2.hist(dataframe_females['Weight'])
ax2.set_title('Histogram of weights for females in [pounds]')
ax2.set_xlabel('weight [pounds]')
ax2.set_ylabel('frecuency')
ax2.grid(True)

#Compute the mean and standard deviation of weight for females
mean_weight= np.mean(dataframe_females['Weight'])
std_weight= np.std(dataframe_females['Weight'])

print(f'Mean of weights[females]:{mean_weight}[pounds]')
print(f'Standard deviation of weights[females]:{std_weight}[pounds]')

plt.figure(figsize=(10,7))
#plt.plot(dataframe_females['Height'],dataframe_females['Weight'],'or')
plt.scatter(dataframe_females['Height'],dataframe_females['Weight'],s=10,c=[1,0,1])
plt.xlabel('height[in]')
plt.ylabel('weight[pounds]')
plt.grid()
plt.show()

#Compute the coavariance matrix for height and 
cov_matrix_female=np.cov(np.array([dataframe_females['Height'],dataframe_females['Weight']]))

#Print the coavariance matrix
print(f'Coavariance matrix: \n {cov_matrix_female}')

# find the linear regression model 
x=dataframe_females['Height'].to_numpy() 
y=dataframe_females['Weight'].to_numpy()
w_linear_regression = LinearRegression().fit(x.reshape(-1,1),y) # para los argumentos, x debe ser una columna, por eso el reshape
                                                                #el argumento "1" hace referencia que solo queremos una columa, y el "-1" hace referencia que no importa el numero de renglones
                                                                # para el argumento de y no hay problema.

#Print the linear model of weights female
print(f"w = {w_linear_regression.coef_[0]} h + {w_linear_regression.intercept_}")

w_linear_regression.coef_

w_linear_regression.intercept_

def conver_meters_to_in(m):
  inches = m * 39.3701
  return inches

def convert_lb_to_kg(lb):
  kg = lb * 0.453592
  return kg

#Make a sigle prediction
height_test = 1.65
inches_test = conver_meters_to_in(height_test)
w_st1 = w_linear_regression.coef_*inches_test + w_linear_regression.intercept_
print(f"Prediction: {convert_lb_to_kg(w_st1)} kg")

w_st1 = w_linear_regression.predict(np.array([conver_meters_to_in(1.65)]).reshape(-1,1))

convert_lb_to_kg(w_st1)

#Predict the weight for height
y_predicted = w_linear_regression.predict(x.reshape(-1,1))
print(f"Predicted weights: {y_predicted}")

#Compute residual
residual = y - y_predicted
print(f"Residual: {residual}")

#Plot histogram of residual
plt.figure(figsize=(10,7))
plt.hist(residual)
plt.show
plt.grid()

"""<a name="linear-predictive-mode-males"></a>
### 4. Generate linear predictive model for males







"""

#Find the regression models for males
dataframe_males = dataframe[dataframe['Gender']=='Male']
dataframe_males

x = dataframe_males['Height'].to_numpy()
y = dataframe_males['Weight'].to_numpy()
w_regression_model_males = LinearRegression().fit(x.reshape(-1,1),y)
print(w_linear_regression.coef_)
print(w_linear_regression.intercept_)

w_st2 = w_regression_model_males.predict(np.array([conver_meters_to_in(1.70)]).reshape(-1,1))
print(convert_lb_to_kg(w_st2),'kg')